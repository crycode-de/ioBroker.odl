{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/**\n * ioBroker ODL adapter.\n *\n * (C) 2019-2023 Peter M\u00FCller <peter@crycode.de> (https://github.com/crycode-de/ioBroker.odl)\n */\n\nimport 'source-map-support/register';\n\nimport {\n  Adapter,\n  AdapterOptions,\n  EXIT_CODES,\n} from '@iobroker/adapter-core';\n\nimport axios from 'axios';\n\n/**\n * The ODL adapter.\n */\nclass OdlAdapter extends Adapter {\n\n  /**\n   * URL to get the latest data.\n   */\n  private readonly urlLatest: string = 'https://www.imis.bfs.de/ogc/opendata/ows?service=WFS&version=1.1.0&request=GetFeature&typeName=opendata:odlinfo_odl_1h_latest&outputFormat=application/json';\n\n  /**\n   * URL to get the latest 168 features (24h * 7d = 168 features).\n   * `#kenn#` will be replaced by the identifier.\n   */\n  private readonly urlTimeseries: string = 'https://www.imis.bfs.de/ogc/opendata/ows?service=WFS&version=1.1.0&request=GetFeature&typeName=opendata:odlinfo_timeseries_odl_1h&outputFormat=application/json&viewparams=kenn:#kenn#&sortBy=end_measure+A&maxFeatures=168';\n\n  /**\n   * Timeout to force adapter exit after some time.\n   */\n  private exitTimeout: NodeJS.Timeout | null = null;\n\n  /**\n   * If the adapter is unloaded (should stop).\n   */\n  private unloaded: boolean = false;\n\n  /**\n   * Configured system language.\n   */\n  private systemLanguage: string = 'en';\n\n  /**\n   * Constructor to create a new instance of the adapter.\n   * @param options The adapter options.\n   */\n  constructor(options: Partial<AdapterOptions> = {}) {\n    super({\n      ...options,\n      name: 'odl',\n    });\n\n    this.on('ready', this.onReady.bind(this));\n    this.on('unload', this.onUnload.bind(this));\n\n    this.exitTimeout = setTimeout(() => {\n      this.unloaded = true;\n\n      // this.log may be undefined if the adapter could not connect to states/objects db\n      if (this.log) {\n        this.log.warn(`Adapter did not exit within 10 minutes. Will now terminate!`);\n      }\n      this.exit(EXIT_CODES.ADAPTER_REQUESTED_TERMINATION);\n    }, 600000); // 10 minutes\n  }\n\n  /**\n   * Is called when databases are connected and adapter received configuration.\n   */\n  private async onReady(): Promise<void> {\n    let instObj: ioBroker.InstanceObject | null | undefined = null;\n\n    /*\n     * Adjust the schedule if not already adjusted.\n     * Default schedule is `30 * * * *`.\n     * The adjusted schedule uses also seconds to spread API calls better.\n     */\n    try {\n      instObj = await this.getForeignObjectAsync(`system.adapter.${this.namespace}`);\n      if (instObj?.common?.schedule === '30 * * * *') {\n        const second = Math.floor(Math.random() * 60); // 0 to 59\n        const minute = Math.floor(Math.random() * 31) + 15; // 15 to 45\n        instObj.common.schedule = `${second} ${minute} * * * *`;\n        this.log.info(`Schedule adjusted to spread calls better over a half hour!`);\n        await this.setForeignObjectAsync(`system.adapter.${this.namespace}`, instObj);\n        this.exit(EXIT_CODES.NO_ERROR);\n        return;\n      }\n    } catch (e) {\n      this.log.error(`Could not check or adjust the schedule`);\n    }\n\n    // get the system language\n    const objSystemConfig = await this.getForeignObjectAsync('system.config');\n    this.systemLanguage = objSystemConfig?.common?.language || 'en';\n    this.log.debug(`system language: ${this.systemLanguage}`);\n\n    // check config msts is an array\n    if (!Array.isArray(this.config.msts)) {\n      this.config.msts = [];\n    }\n\n    // disable history updates if more than 10 measuring points are configured\n    if (this.config.msts.length > 10) {\n      this.log.debug('More than 10 measuring points are configured, so the history update will be disabled.');\n      this.config.updateHistory = false;\n    }\n\n    this.log.debug('start reading data...');\n\n    try {\n      await this.read();\n      this.log.debug('done');\n    } catch (err) {\n      this.log.error(`Error loading data: ${err}`);\n    }\n\n    this.exit(EXIT_CODES.NO_ERROR);\n  }\n\n  /**\n   * Adapter should unload.\n   */\n  private onUnload (cb?: () => void): void {\n    this.unloaded = true;\n    cb?.();\n  }\n\n  /**\n   * Terminate or exit the adapter.\n   * @param code The exit code.\n   */\n  private exit (code: number): void {\n    if (this.exitTimeout) {\n      clearTimeout(this.exitTimeout);\n    }\n\n    this.terminate ? this.terminate(code) : process.exit(code);\n  }\n\n  /**\n   * Read the data, create objects and states.\n   */\n  private async read (): Promise<void> {\n    // read data from latest layer\n    const resLatest = await axios.request<FeatureCollection<FeaturePropertiesLatest>>({\n      url: this.urlLatest,\n      method: 'get',\n      headers: {\n        Accept: 'application/json',\n        'User-Agent': `Mozilla/5.0 (compatible; ioBroker.odl/${this.version})`,\n      },\n      timeout: (this.config.timeout || 30) * 1000,\n    })\n      .catch((err) => {\n        this.log.warn('Error loading latest data from server!');\n        this.log.warn(err);\n        return null;\n      });\n\n    // check unloaded\n    if (this.unloaded) {\n      return;\n    }\n\n    if (!resLatest?.data) {\n      this.log.warn(`Got no data for latest layer`);\n      return;\n    }\n\n    this.log.debug(`got response for latest, http status ${resLatest.status} ${resLatest.statusText}`);\n\n    if (resLatest.status !== 200) {\n      this.log.warn('Error loading latest data from server!');\n      this.log.warn(`HTTP status ${resLatest.status} ${resLatest.statusText}`);\n      this.log.debug(JSON.stringify(resLatest.data));\n      return;\n    }\n\n    const featureCollectionLatest = resLatest.data;\n\n    // check if we got data\n    if (!featureCollectionLatest || !Array.isArray(featureCollectionLatest.features) || featureCollectionLatest.features.length === 0) {\n      this.log.warn(`Got no data for latest layer`);\n      return;\n    }\n\n    // check if we need to migrate old configurations before v2.0.0\n    if (Array.isArray(this.config.localityCode) && this.config.localityCode.length > 0) {\n      this.log.info('Found outdated configuration. Will now migrate this from locality codes to identifiers.');\n      try {\n        const instObj = await this.getForeignObjectAsync(`system.adapter.${this.namespace}`);\n        if (instObj) {\n          instObj.native = {\n            ...this.config,\n          };\n          instObj.native.msts = instObj.native.msts || [];\n          for (const loc of this.config.localityCode) {\n            const feature = featureCollectionLatest.features.find((f) => f.properties.id === loc);\n            if (feature) {\n              instObj.native.msts.push(feature.properties.kenn);\n              this.log.info(`Migrated locality code ${loc} to identifier ${feature.properties.kenn}`);\n            } else {\n              this.log.warn(`Locality code ${loc} not found in current BfS data!`);\n            }\n          }\n          delete instObj.native.localityCode;\n          this.log.info(`Migrated ${instObj.native.msts.length} localities`);\n          if (instObj.native.msts.length > 0) {\n            this.log.warn('Please check and transfer your history configurations from the old objects to the new ones. Also you may delete the old DEZ\u2026 objects as they are no longer used now.');\n          }\n          await this.setForeignObjectAsync(`system.adapter.${this.namespace}`, instObj);\n          this.exit(EXIT_CODES.NO_ERROR);\n          return;\n        }\n      } catch (e) {\n        this.log.error(`Could not adjust outdated configuration!`);\n      }\n      return;\n    }\n\n    /*\n     * configured measuring points\n     */\n    for (const mstKenn of this.config.msts) {\n      // check unloaded\n      if (this.unloaded) {\n        return;\n      }\n\n      const featureLatest = featureCollectionLatest.features.find((f) => f.properties.kenn === mstKenn);\n      if (!featureLatest) {\n        this.log.warn(`Identifier ${mstKenn} not found in latest data!`);\n        continue;\n      }\n\n      /*\n       * channel\n       */\n      let objChan: ioBroker.ChannelObject | null = await this.getObjectAsync(mstKenn) as ioBroker.ChannelObject | null;\n      if (objChan?.type !== 'channel') {\n        objChan = {\n          _id:`${this.namespace}.${mstKenn}`,\n          type: 'channel',\n          common: {\n            name: `${mstKenn} - ${featureLatest.properties.plz} ${featureLatest.properties.name}`,\n          },\n          native: {},\n        };\n        await this.setObjectAsync(mstKenn, objChan);\n        this.log.debug(`created channel ${objChan._id}`);\n      }\n\n\n      /*\n       * value object\n       */\n      let objValue: ioBroker.StateObject | null = await this.getObjectAsync(mstKenn + '.value') as ioBroker.StateObject | null;\n      if (!objValue) {\n        objValue = {\n          _id: `${this.namespace}.${mstKenn}.value`,\n          type: 'state',\n          common: {\n            name: {\n              de: `${mstKenn} - ${featureLatest.properties.plz} ${featureLatest.properties.name} ODL`,\n              en: `${mstKenn} - ${featureLatest.properties.plz} ${featureLatest.properties.name} ADR`,\n            },\n            role: 'value',\n            type: 'number',\n            unit: '\u00B5Sv/h',\n            read: true,\n            write: false,\n          },\n          native: {},\n        };\n        await this.setObjectAsync(`${mstKenn}.value`, objValue);\n        this.log.debug(`created state ${objValue._id}`);\n      }\n\n      /*\n       * cosmic/terrestrial objects\n       */\n      let objValueCosmic: ioBroker.StateObject | null = null;\n      let objValueTerrestrial: ioBroker.StateObject | null = null;\n      if (this.config.useCosmicTerrestrial) {\n        objValueCosmic = await this.getObjectAsync(mstKenn + '.valueCosmic') as ioBroker.StateObject | null;\n        if (!objValueCosmic) {\n          objValueCosmic = {\n            _id: `${this.namespace}.${mstKenn}.valueCosmic`,\n            type: 'state',\n            common: {\n              name: {\n                de: `${mstKenn} - ${featureLatest.properties.plz} ${featureLatest.properties.name} ODL kosmisch`,\n                en: `${mstKenn} - ${featureLatest.properties.plz} ${featureLatest.properties.name} ADR cosmic`,\n              },\n              role: 'value',\n              type: 'number',\n              unit: '\u00B5Sv/h',\n              read: true,\n              write: false,\n            },\n            native: {},\n          };\n          await this.setObjectAsync(`${mstKenn}.valueCosmic`, objValueCosmic);\n          this.log.debug(`created state ${objValueCosmic._id}`);\n        }\n\n        objValueTerrestrial = await this.getObjectAsync(mstKenn + '.valueTerrestrial') as ioBroker.StateObject | null;\n        if (!objValueTerrestrial) {\n          objValueTerrestrial = {\n            _id: `${this.namespace}.${mstKenn}.valueTerrestrial`,\n            type: 'state',\n            common: {\n              name: {\n                de: `${mstKenn} - ${featureLatest.properties.plz} ${featureLatest.properties.name} ODL terrestrisch`,\n                en: `${mstKenn} - ${featureLatest.properties.plz} ${featureLatest.properties.name} ADR terrestrial`,\n              },\n              role: 'value',\n              type: 'number',\n              unit: '\u00B5Sv/h',\n              read: true,\n              write: false,\n            },\n            native: {},\n          };\n          await this.setObjectAsync(`${mstKenn}.valueTerrestrial`, objValueTerrestrial);\n          this.log.debug(`created state ${objValueTerrestrial._id}`);\n        }\n      }\n\n      /*\n       * status object\n       */\n      let objStatus: ioBroker.StateObject | null = await this.getObjectAsync(mstKenn + '.status') as ioBroker.StateObject | null;\n      if (!objStatus) {\n        objStatus = {\n          _id: `${this.namespace}.${mstKenn}.status`,\n          type: 'state',\n          common: {\n            name: {\n              de: `${mstKenn} - ${featureLatest.properties.plz} ${featureLatest.properties.name} Status`,\n              en: `${mstKenn} - ${featureLatest.properties.plz} ${featureLatest.properties.name} Status`,\n            },\n            role: 'value',\n            type: 'number',\n            read: true,\n            write: false,\n            states: {\n              1: this.systemLanguage === 'de' ? 'in Betrieb' : 'in operation',\n              2: this.systemLanguage === 'de' ? 'defekt' : 'defective',\n              3: this.systemLanguage === 'de' ? 'Testbetrieb' : 'test operation',\n            },\n          },\n          native: {},\n        };\n        await this.setObjectAsync(`${mstKenn}.status`, objStatus);\n        this.log.debug(`created state ${objStatus._id}`);\n      }\n\n      // set the value if value or timestamp changed\n      const newState: ioBroker.SettableState = {\n        val: featureLatest.properties.value,\n        ack: true,\n        ts: featureLatest.properties.end_measure ? new Date(featureLatest.properties.end_measure).getTime() : Date.now(),\n        q: featureLatest.properties.value !== null ? 0x00 : 0x81, // 0x00 = good, 0x81 = general problem by sensor\n      };\n      const currentState = await this.getStateAsync(`${mstKenn}.value`);\n      if (!currentState || currentState.val !== (newState as ioBroker.State).val || currentState.ts !== (newState as ioBroker.State).ts) {\n        await this.setStateAsync(`${mstKenn}.value`, newState);\n\n        if (objValueCosmic) {\n          (newState as ioBroker.State).val = featureLatest.properties.value_cosmic;\n          await this.setStateAsync(`${mstKenn}.valueCosmic`, newState);\n        }\n        if (objValueTerrestrial) {\n          (newState as ioBroker.State).val = featureLatest.properties.value_terrestrial;\n          await this.setStateAsync(`${mstKenn}.valueTerrestrial`, newState);\n        }\n      }\n\n      // set status\n      await this.setStateAsync(`${mstKenn}.status`, featureLatest.properties.site_status, true);\n\n      /*\n       * check history when updating the history enabled, status is in operation and values are provided\n       */\n      if (this.config.updateHistory && featureLatest.properties.site_status === 1 && featureLatest.properties.end_measure && featureLatest.properties.value && featureLatest.properties.value_cosmic) {\n        let updateHistory = false;\n\n        // timerange for the history check\n        const histroyEndDate = new Date(featureLatest.properties.end_measure);\n        const historyEnd = histroyEndDate.getTime();\n        const historyStart = histroyEndDate.setDate(histroyEndDate.getDate() - 7) + 100; // +1000 because we don't need same hour 7 days ago (would be the 169th value)\n\n        const currentHistory: Record<string, Record<string, ioBroker.State[]>> = {};\n\n        for (const obj of [objValue, objValueCosmic, objValueTerrestrial]) {\n          if (!obj) continue;\n\n          currentHistory[obj._id] = {};\n\n          for (const historyKey in obj.common.custom) {\n            // check if history is found and enabled\n            if (historyKey.match(/^(history|influxdb|sql)\\.\\d+$/) && obj.common.custom[historyKey].enabled === true) {\n              // history instance found and enabled\n              this.log.debug(`history adapter ${historyKey} found for ${obj._id}`);\n\n              // load current history in the given time range\n              const getHistoryResult: GetHistoryResult = await this.sendToAsync(historyKey, 'getHistory', {\n                id: obj._id,\n                options: {\n                  start: historyStart,\n                  end: historyEnd,\n                  ack: true,\n                  aggregate: 'none',\n                },\n              });\n              let tmpHistory = (getHistoryResult && Array.isArray(getHistoryResult.result)) ? getHistoryResult.result : [];\n              tmpHistory = tmpHistory.filter((h) => h.ts >= historyStart && h.ts <= historyEnd); // need to filter because the history sometimes reports values out of requested ts range\n              if (tmpHistory.length < 168) { // 24h * 7d = 168 values\n                this.log.debug(`history ${historyKey} for ${obj._id} is incomplete (${tmpHistory.length} of 168 values)`);\n                currentHistory[obj._id][historyKey] = tmpHistory;\n                updateHistory = true;\n              } else {\n                this.log.debug(`history ${historyKey} for ${obj._id} seams to be complete`);\n              }\n            }\n          }\n        }\n\n        // need to update any history?\n        if (updateHistory) {\n          this.log.debug(`need to update history for ${mstKenn}`);\n\n          // get timeseries\n          const resTimeseries = await axios.request<FeatureCollection<FeaturePropertiesTimeseries>>({\n            url: this.urlTimeseries.replace('#kenn#', mstKenn),\n            method: 'get',\n            headers: {\n              Accept: 'application/json',\n              'User-Agent': `Mozilla/5.0 (compatible; ioBroker.odl/${this.version})`,\n            },\n            timeout: (this.config.timeout || 30) * 1000,\n          })\n            .catch((err) => {\n              this.log.warn(`Error loading timeseries data for ${mstKenn} from server!`);\n              this.log.warn(err);\n              return null;\n            });\n\n          // check unloaded\n          if (this.unloaded) {\n            return;\n          }\n\n          if (!resTimeseries?.data) {\n            this.log.warn(`Got no timeseries data for ${mstKenn}`);\n            continue; // next mstKenn\n          }\n\n          this.log.debug(`got response for timeseries ${mstKenn}, http status ${resTimeseries.status} ${resTimeseries.statusText}`);\n\n          if (resTimeseries.status !== 200) {\n            this.log.warn(`Error loading timeseries data for ${mstKenn} from server!`);\n            this.log.warn(`HTTP status ${resTimeseries.status} ${resTimeseries.statusText}`);\n            this.log.debug(JSON.stringify(resTimeseries.data));\n            continue; // next mstKenn\n          }\n\n          const featureCollectionTimeseries = resTimeseries.data;\n\n          // check if we got data\n          if (!featureCollectionTimeseries || !Array.isArray(featureCollectionTimeseries.features) || featureCollectionTimeseries.features.length === 0) {\n            this.log.warn(`Got no timeseries data for ${mstKenn}`);\n            continue; // next mstKenn\n          }\n\n          // loop over the three value objects to reuse code ;-)\n          // cosmic and terrestrial may be null\n          for (const obj of [objValue, objValueCosmic, objValueTerrestrial]) {\n            if (!obj) continue;\n\n            for (const historyKey in currentHistory[obj._id]) {\n              const oldHistory = currentHistory[obj._id][historyKey];\n              const newHistory: Partial<ioBroker.State>[] = [];\n\n              // check each feature if it must be added to history\n              for (const feature of featureCollectionTimeseries.features) {\n                const endMeasureTs = new Date(feature.properties.end_measure).getTime();\n                if (feature.properties.end_measure === featureLatest.properties.end_measure\n                  || oldHistory.find((state) => (state.ts === endMeasureTs))) continue;\n\n                // cosmic/terrestrial value must be calculated here because the API does not provied them as timeseries\n                // but the cosmic part is fixed so we can use it from the latest feature\n                let val: number;\n                if (obj._id.endsWith('.valueCosmic')) {\n                  // cosmic is fixed for each location\n                  val = featureLatest.properties.value_cosmic;\n                } else if (obj._id.endsWith('.valueTerrestrial')) {\n                  // multiply and divide by 1000 to avoid floating point precision errors\n                  val = (feature.properties.value * 1000 - featureLatest.properties.value_cosmic * 1000) / 1000;\n                } else {\n                  val = feature.properties.value;\n                }\n\n                this.log.debug(`adding ${val}@${feature.properties.end_measure} for ${obj._id} to ${historyKey}`);\n\n                newHistory.push({\n                  ts: endMeasureTs,\n                  val,\n                  ack: true,\n                  from: 'system.adapter.' + this.namespace,\n                  q: 0x00,\n                });\n              }\n\n              // add sates to history\n              if (newHistory.length > 0) {\n                await this.sendToAsync(historyKey, 'storeState', {\n                  id: obj._id,\n                  state: newHistory,\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n\n    /*\n     * statistics\n     */\n    // check unloaded\n    if (this.unloaded) {\n      return;\n    }\n\n    await Promise.all([\n      this.setStateAsync('statistics.total', featureCollectionLatest.features.length, true),\n      this.setStateAsync('statistics.inOperation', featureCollectionLatest.features.filter((f) => f.properties.site_status === 1).length, true),\n      this.setStateAsync('statistics.defective', featureCollectionLatest.features.filter((f) => f.properties.site_status === 2).length, true),\n      this.setStateAsync('statistics.testOperation', featureCollectionLatest.features.filter((f) => f.properties.site_status === 3).length, true),\n    ]);\n\n    const fValues = featureCollectionLatest.features.filter((f) => f.properties.value !== null).map((f) => f.properties.value as number);\n    if (fValues.length > 0) {\n      const valMin = Math.min(...fValues);\n      const valMax = Math.max(...fValues);\n      const valAvg = Math.round(fValues.reduce((a, b) => a + b, 0) / fValues.length * 1000) / 1000;\n\n      const fMin = featureCollectionLatest.features.find((f) => f.properties.value === valMin);\n      const fMax = featureCollectionLatest.features.find((f) => f.properties.value === valMax);\n      const fMinStr = fMin ? `${fMin.properties.kenn} - ${fMin.properties.plz} ${fMin.properties.name}` : '';\n      const fMaxStr = fMax ? `${fMax.properties.kenn} - ${fMax.properties.plz} ${fMax.properties.name}` : '';\n\n      await Promise.all([\n        this.setStateAsync('statistics.valueMin', valMin, true),\n        this.setStateAsync('statistics.valueMinLocation', fMinStr, true),\n        this.setStateAsync('statistics.valueMax', valMax, true),\n        this.setStateAsync('statistics.valueMaxLocation', fMaxStr, true),\n        this.setStateAsync('statistics.valueAvg', valAvg, true),\n      ]);\n    } else {\n      await Promise.all([\n        this.setStateAsync('statistics.valueMin', { val: null, q: 0x01 }, true),\n        this.setStateAsync('statistics.valueMinLocation', { val: null, q: 0x01 }, true),\n        this.setStateAsync('statistics.valueMax', { val: null, q: 0x01 }, true),\n        this.setStateAsync('statistics.valueMaxLocation', { val: null, q: 0x01 }, true),\n        this.setStateAsync('statistics.valueAvg', { val: null, q: 0x01 }, true),\n      ]);\n    }\n  }\n\n}\n\nif (require.main !== module) {\n  // Export the constructor in compact mode\n  module.exports = (options: Partial<AdapterOptions> | undefined) => new OdlAdapter(options);\n} else {\n  // otherwise start the instance directly\n  (() => new OdlAdapter())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAMA,sBAAO;AAEP,0BAIO;AAEP,mBAAkB;AAKlB,MAAM,mBAAmB,4BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,EAgC/B,YAAY,UAAmC,CAAC,GAAG;AACjD,UAAM;AAAA,MACJ,GAAG;AAAA,MACH,MAAM;AAAA,IACR,CAAC;AA/BH;AAAA;AAAA;AAAA,SAAiB,YAAoB;AAMrC;AAAA;AAAA;AAAA;AAAA,SAAiB,gBAAwB;AAKzC;AAAA;AAAA;AAAA,SAAQ,cAAqC;AAK7C;AAAA;AAAA;AAAA,SAAQ,WAAoB;AAK5B;AAAA;AAAA;AAAA,SAAQ,iBAAyB;AAY/B,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAE1C,SAAK,cAAc,WAAW,MAAM;AAClC,WAAK,WAAW;AAGhB,UAAI,KAAK,KAAK;AACZ,aAAK,IAAI,KAAK,6DAA6D;AAAA,MAC7E;AACA,WAAK,KAAK,+BAAW,6BAA6B;AAAA,IACpD,GAAG,GAAM;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,UAAyB;AA1EzC;AA2EI,QAAI,UAAsD;AAO1D,QAAI;AACF,gBAAU,MAAM,KAAK,sBAAsB,kBAAkB,KAAK,SAAS,EAAE;AAC7E,YAAI,wCAAS,WAAT,mBAAiB,cAAa,cAAc;AAC9C,cAAM,SAAS,KAAK,MAAM,KAAK,OAAO,IAAI,EAAE;AAC5C,cAAM,SAAS,KAAK,MAAM,KAAK,OAAO,IAAI,EAAE,IAAI;AAChD,gBAAQ,OAAO,WAAW,GAAG,MAAM,IAAI,MAAM;AAC7C,aAAK,IAAI,KAAK,4DAA4D;AAC1E,cAAM,KAAK,sBAAsB,kBAAkB,KAAK,SAAS,IAAI,OAAO;AAC5E,aAAK,KAAK,+BAAW,QAAQ;AAC7B;AAAA,MACF;AAAA,IACF,SAAS,GAAG;AACV,WAAK,IAAI,MAAM,wCAAwC;AAAA,IACzD;AAGA,UAAM,kBAAkB,MAAM,KAAK,sBAAsB,eAAe;AACxE,SAAK,mBAAiB,wDAAiB,WAAjB,mBAAyB,aAAY;AAC3D,SAAK,IAAI,MAAM,oBAAoB,KAAK,cAAc,EAAE;AAGxD,QAAI,CAAC,MAAM,QAAQ,KAAK,OAAO,IAAI,GAAG;AACpC,WAAK,OAAO,OAAO,CAAC;AAAA,IACtB;AAGA,QAAI,KAAK,OAAO,KAAK,SAAS,IAAI;AAChC,WAAK,IAAI,MAAM,uFAAuF;AACtG,WAAK,OAAO,gBAAgB;AAAA,IAC9B;AAEA,SAAK,IAAI,MAAM,uBAAuB;AAEtC,QAAI;AACF,YAAM,KAAK,KAAK;AAChB,WAAK,IAAI,MAAM,MAAM;AAAA,IACvB,SAAS,KAAK;AACZ,WAAK,IAAI,MAAM,uBAAuB,GAAG,EAAE;AAAA,IAC7C;AAEA,SAAK,KAAK,+BAAW,QAAQ;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAKQ,SAAU,IAAuB;AACvC,SAAK,WAAW;AAChB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,KAAM,MAAoB;AAChC,QAAI,KAAK,aAAa;AACpB,mBAAa,KAAK,WAAW;AAAA,IAC/B;AAEA,SAAK,YAAY,KAAK,UAAU,IAAI,IAAI,QAAQ,KAAK,IAAI;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,OAAuB;AAEnC,UAAM,YAAY,MAAM,aAAAA,QAAM,QAAoD;AAAA,MAChF,KAAK,KAAK;AAAA,MACV,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,QAAQ;AAAA,QACR,cAAc,yCAAyC,KAAK,OAAO;AAAA,MACrE;AAAA,MACA,UAAU,KAAK,OAAO,WAAW,MAAM;AAAA,IACzC,CAAC,EACE,MAAM,CAAC,QAAQ;AACd,WAAK,IAAI,KAAK,wCAAwC;AACtD,WAAK,IAAI,KAAK,GAAG;AACjB,aAAO;AAAA,IACT,CAAC;AAGH,QAAI,KAAK,UAAU;AACjB;AAAA,IACF;AAEA,QAAI,EAAC,uCAAW,OAAM;AACpB,WAAK,IAAI,KAAK,8BAA8B;AAC5C;AAAA,IACF;AAEA,SAAK,IAAI,MAAM,wCAAwC,UAAU,MAAM,IAAI,UAAU,UAAU,EAAE;AAEjG,QAAI,UAAU,WAAW,KAAK;AAC5B,WAAK,IAAI,KAAK,wCAAwC;AACtD,WAAK,IAAI,KAAK,eAAe,UAAU,MAAM,IAAI,UAAU,UAAU,EAAE;AACvE,WAAK,IAAI,MAAM,KAAK,UAAU,UAAU,IAAI,CAAC;AAC7C;AAAA,IACF;AAEA,UAAM,0BAA0B,UAAU;AAG1C,QAAI,CAAC,2BAA2B,CAAC,MAAM,QAAQ,wBAAwB,QAAQ,KAAK,wBAAwB,SAAS,WAAW,GAAG;AACjI,WAAK,IAAI,KAAK,8BAA8B;AAC5C;AAAA,IACF;AAGA,QAAI,MAAM,QAAQ,KAAK,OAAO,YAAY,KAAK,KAAK,OAAO,aAAa,SAAS,GAAG;AAClF,WAAK,IAAI,KAAK,yFAAyF;AACvG,UAAI;AACF,cAAM,UAAU,MAAM,KAAK,sBAAsB,kBAAkB,KAAK,SAAS,EAAE;AACnF,YAAI,SAAS;AACX,kBAAQ,SAAS;AAAA,YACf,GAAG,KAAK;AAAA,UACV;AACA,kBAAQ,OAAO,OAAO,QAAQ,OAAO,QAAQ,CAAC;AAC9C,qBAAW,OAAO,KAAK,OAAO,cAAc;AAC1C,kBAAM,UAAU,wBAAwB,SAAS,KAAK,CAAC,MAAM,EAAE,WAAW,OAAO,GAAG;AACpF,gBAAI,SAAS;AACX,sBAAQ,OAAO,KAAK,KAAK,QAAQ,WAAW,IAAI;AAChD,mBAAK,IAAI,KAAK,0BAA0B,GAAG,kBAAkB,QAAQ,WAAW,IAAI,EAAE;AAAA,YACxF,OAAO;AACL,mBAAK,IAAI,KAAK,iBAAiB,GAAG,iCAAiC;AAAA,YACrE;AAAA,UACF;AACA,iBAAO,QAAQ,OAAO;AACtB,eAAK,IAAI,KAAK,YAAY,QAAQ,OAAO,KAAK,MAAM,aAAa;AACjE,cAAI,QAAQ,OAAO,KAAK,SAAS,GAAG;AAClC,iBAAK,IAAI,KAAK,2KAAsK;AAAA,UACtL;AACA,gBAAM,KAAK,sBAAsB,kBAAkB,KAAK,SAAS,IAAI,OAAO;AAC5E,eAAK,KAAK,+BAAW,QAAQ;AAC7B;AAAA,QACF;AAAA,MACF,SAAS,GAAG;AACV,aAAK,IAAI,MAAM,0CAA0C;AAAA,MAC3D;AACA;AAAA,IACF;AAKA,eAAW,WAAW,KAAK,OAAO,MAAM;AAEtC,UAAI,KAAK,UAAU;AACjB;AAAA,MACF;AAEA,YAAM,gBAAgB,wBAAwB,SAAS,KAAK,CAAC,MAAM,EAAE,WAAW,SAAS,OAAO;AAChG,UAAI,CAAC,eAAe;AAClB,aAAK,IAAI,KAAK,cAAc,OAAO,4BAA4B;AAC/D;AAAA,MACF;AAKA,UAAI,UAAyC,MAAM,KAAK,eAAe,OAAO;AAC9E,WAAI,mCAAS,UAAS,WAAW;AAC/B,kBAAU;AAAA,UACR,KAAI,GAAG,KAAK,SAAS,IAAI,OAAO;AAAA,UAChC,MAAM;AAAA,UACN,QAAQ;AAAA,YACN,MAAM,GAAG,OAAO,MAAM,cAAc,WAAW,GAAG,IAAI,cAAc,WAAW,IAAI;AAAA,UACrF;AAAA,UACA,QAAQ,CAAC;AAAA,QACX;AACA,cAAM,KAAK,eAAe,SAAS,OAAO;AAC1C,aAAK,IAAI,MAAM,mBAAmB,QAAQ,GAAG,EAAE;AAAA,MACjD;AAMA,UAAI,WAAwC,MAAM,KAAK,eAAe,UAAU,QAAQ;AACxF,UAAI,CAAC,UAAU;AACb,mBAAW;AAAA,UACT,KAAK,GAAG,KAAK,SAAS,IAAI,OAAO;AAAA,UACjC,MAAM;AAAA,UACN,QAAQ;AAAA,YACN,MAAM;AAAA,cACJ,IAAI,GAAG,OAAO,MAAM,cAAc,WAAW,GAAG,IAAI,cAAc,WAAW,IAAI;AAAA,cACjF,IAAI,GAAG,OAAO,MAAM,cAAc,WAAW,GAAG,IAAI,cAAc,WAAW,IAAI;AAAA,YACnF;AAAA,YACA,MAAM;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,YACN,OAAO;AAAA,UACT;AAAA,UACA,QAAQ,CAAC;AAAA,QACX;AACA,cAAM,KAAK,eAAe,GAAG,OAAO,UAAU,QAAQ;AACtD,aAAK,IAAI,MAAM,iBAAiB,SAAS,GAAG,EAAE;AAAA,MAChD;AAKA,UAAI,iBAA8C;AAClD,UAAI,sBAAmD;AACvD,UAAI,KAAK,OAAO,sBAAsB;AACpC,yBAAiB,MAAM,KAAK,eAAe,UAAU,cAAc;AACnE,YAAI,CAAC,gBAAgB;AACnB,2BAAiB;AAAA,YACf,KAAK,GAAG,KAAK,SAAS,IAAI,OAAO;AAAA,YACjC,MAAM;AAAA,YACN,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,IAAI,GAAG,OAAO,MAAM,cAAc,WAAW,GAAG,IAAI,cAAc,WAAW,IAAI;AAAA,gBACjF,IAAI,GAAG,OAAO,MAAM,cAAc,WAAW,GAAG,IAAI,cAAc,WAAW,IAAI;AAAA,cACnF;AAAA,cACA,MAAM;AAAA,cACN,MAAM;AAAA,cACN,MAAM;AAAA,cACN,MAAM;AAAA,cACN,OAAO;AAAA,YACT;AAAA,YACA,QAAQ,CAAC;AAAA,UACX;AACA,gBAAM,KAAK,eAAe,GAAG,OAAO,gBAAgB,cAAc;AAClE,eAAK,IAAI,MAAM,iBAAiB,eAAe,GAAG,EAAE;AAAA,QACtD;AAEA,8BAAsB,MAAM,KAAK,eAAe,UAAU,mBAAmB;AAC7E,YAAI,CAAC,qBAAqB;AACxB,gCAAsB;AAAA,YACpB,KAAK,GAAG,KAAK,SAAS,IAAI,OAAO;AAAA,YACjC,MAAM;AAAA,YACN,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,IAAI,GAAG,OAAO,MAAM,cAAc,WAAW,GAAG,IAAI,cAAc,WAAW,IAAI;AAAA,gBACjF,IAAI,GAAG,OAAO,MAAM,cAAc,WAAW,GAAG,IAAI,cAAc,WAAW,IAAI;AAAA,cACnF;AAAA,cACA,MAAM;AAAA,cACN,MAAM;AAAA,cACN,MAAM;AAAA,cACN,MAAM;AAAA,cACN,OAAO;AAAA,YACT;AAAA,YACA,QAAQ,CAAC;AAAA,UACX;AACA,gBAAM,KAAK,eAAe,GAAG,OAAO,qBAAqB,mBAAmB;AAC5E,eAAK,IAAI,MAAM,iBAAiB,oBAAoB,GAAG,EAAE;AAAA,QAC3D;AAAA,MACF;AAKA,UAAI,YAAyC,MAAM,KAAK,eAAe,UAAU,SAAS;AAC1F,UAAI,CAAC,WAAW;AACd,oBAAY;AAAA,UACV,KAAK,GAAG,KAAK,SAAS,IAAI,OAAO;AAAA,UACjC,MAAM;AAAA,UACN,QAAQ;AAAA,YACN,MAAM;AAAA,cACJ,IAAI,GAAG,OAAO,MAAM,cAAc,WAAW,GAAG,IAAI,cAAc,WAAW,IAAI;AAAA,cACjF,IAAI,GAAG,OAAO,MAAM,cAAc,WAAW,GAAG,IAAI,cAAc,WAAW,IAAI;AAAA,YACnF;AAAA,YACA,MAAM;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,YACN,OAAO;AAAA,YACP,QAAQ;AAAA,cACN,GAAG,KAAK,mBAAmB,OAAO,eAAe;AAAA,cACjD,GAAG,KAAK,mBAAmB,OAAO,WAAW;AAAA,cAC7C,GAAG,KAAK,mBAAmB,OAAO,gBAAgB;AAAA,YACpD;AAAA,UACF;AAAA,UACA,QAAQ,CAAC;AAAA,QACX;AACA,cAAM,KAAK,eAAe,GAAG,OAAO,WAAW,SAAS;AACxD,aAAK,IAAI,MAAM,iBAAiB,UAAU,GAAG,EAAE;AAAA,MACjD;AAGA,YAAM,WAAmC;AAAA,QACvC,KAAK,cAAc,WAAW;AAAA,QAC9B,KAAK;AAAA,QACL,IAAI,cAAc,WAAW,cAAc,IAAI,KAAK,cAAc,WAAW,WAAW,EAAE,QAAQ,IAAI,KAAK,IAAI;AAAA,QAC/G,GAAG,cAAc,WAAW,UAAU,OAAO,IAAO;AAAA;AAAA,MACtD;AACA,YAAM,eAAe,MAAM,KAAK,cAAc,GAAG,OAAO,QAAQ;AAChE,UAAI,CAAC,gBAAgB,aAAa,QAAS,SAA4B,OAAO,aAAa,OAAQ,SAA4B,IAAI;AACjI,cAAM,KAAK,cAAc,GAAG,OAAO,UAAU,QAAQ;AAErD,YAAI,gBAAgB;AAClB,UAAC,SAA4B,MAAM,cAAc,WAAW;AAC5D,gBAAM,KAAK,cAAc,GAAG,OAAO,gBAAgB,QAAQ;AAAA,QAC7D;AACA,YAAI,qBAAqB;AACvB,UAAC,SAA4B,MAAM,cAAc,WAAW;AAC5D,gBAAM,KAAK,cAAc,GAAG,OAAO,qBAAqB,QAAQ;AAAA,QAClE;AAAA,MACF;AAGA,YAAM,KAAK,cAAc,GAAG,OAAO,WAAW,cAAc,WAAW,aAAa,IAAI;AAKxF,UAAI,KAAK,OAAO,iBAAiB,cAAc,WAAW,gBAAgB,KAAK,cAAc,WAAW,eAAe,cAAc,WAAW,SAAS,cAAc,WAAW,cAAc;AAC9L,YAAI,gBAAgB;AAGpB,cAAM,iBAAiB,IAAI,KAAK,cAAc,WAAW,WAAW;AACpE,cAAM,aAAa,eAAe,QAAQ;AAC1C,cAAM,eAAe,eAAe,QAAQ,eAAe,QAAQ,IAAI,CAAC,IAAI;AAE5E,cAAM,iBAAmE,CAAC;AAE1E,mBAAW,OAAO,CAAC,UAAU,gBAAgB,mBAAmB,GAAG;AACjE,cAAI,CAAC;AAAK;AAEV,yBAAe,IAAI,GAAG,IAAI,CAAC;AAE3B,qBAAW,cAAc,IAAI,OAAO,QAAQ;AAE1C,gBAAI,WAAW,MAAM,+BAA+B,KAAK,IAAI,OAAO,OAAO,UAAU,EAAE,YAAY,MAAM;AAEvG,mBAAK,IAAI,MAAM,mBAAmB,UAAU,cAAc,IAAI,GAAG,EAAE;AAGnE,oBAAM,mBAAqC,MAAM,KAAK,YAAY,YAAY,cAAc;AAAA,gBAC1F,IAAI,IAAI;AAAA,gBACR,SAAS;AAAA,kBACP,OAAO;AAAA,kBACP,KAAK;AAAA,kBACL,KAAK;AAAA,kBACL,WAAW;AAAA,gBACb;AAAA,cACF,CAAC;AACD,kBAAI,aAAc,oBAAoB,MAAM,QAAQ,iBAAiB,MAAM,IAAK,iBAAiB,SAAS,CAAC;AAC3G,2BAAa,WAAW,OAAO,CAAC,MAAM,EAAE,MAAM,gBAAgB,EAAE,MAAM,UAAU;AAChF,kBAAI,WAAW,SAAS,KAAK;AAC3B,qBAAK,IAAI,MAAM,WAAW,UAAU,QAAQ,IAAI,GAAG,mBAAmB,WAAW,MAAM,iBAAiB;AACxG,+BAAe,IAAI,GAAG,EAAE,UAAU,IAAI;AACtC,gCAAgB;AAAA,cAClB,OAAO;AACL,qBAAK,IAAI,MAAM,WAAW,UAAU,QAAQ,IAAI,GAAG,uBAAuB;AAAA,cAC5E;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAGA,YAAI,eAAe;AACjB,eAAK,IAAI,MAAM,8BAA8B,OAAO,EAAE;AAGtD,gBAAM,gBAAgB,MAAM,aAAAA,QAAM,QAAwD;AAAA,YACxF,KAAK,KAAK,cAAc,QAAQ,UAAU,OAAO;AAAA,YACjD,QAAQ;AAAA,YACR,SAAS;AAAA,cACP,QAAQ;AAAA,cACR,cAAc,yCAAyC,KAAK,OAAO;AAAA,YACrE;AAAA,YACA,UAAU,KAAK,OAAO,WAAW,MAAM;AAAA,UACzC,CAAC,EACE,MAAM,CAAC,QAAQ;AACd,iBAAK,IAAI,KAAK,qCAAqC,OAAO,eAAe;AACzE,iBAAK,IAAI,KAAK,GAAG;AACjB,mBAAO;AAAA,UACT,CAAC;AAGH,cAAI,KAAK,UAAU;AACjB;AAAA,UACF;AAEA,cAAI,EAAC,+CAAe,OAAM;AACxB,iBAAK,IAAI,KAAK,8BAA8B,OAAO,EAAE;AACrD;AAAA,UACF;AAEA,eAAK,IAAI,MAAM,+BAA+B,OAAO,iBAAiB,cAAc,MAAM,IAAI,cAAc,UAAU,EAAE;AAExH,cAAI,cAAc,WAAW,KAAK;AAChC,iBAAK,IAAI,KAAK,qCAAqC,OAAO,eAAe;AACzE,iBAAK,IAAI,KAAK,eAAe,cAAc,MAAM,IAAI,cAAc,UAAU,EAAE;AAC/E,iBAAK,IAAI,MAAM,KAAK,UAAU,cAAc,IAAI,CAAC;AACjD;AAAA,UACF;AAEA,gBAAM,8BAA8B,cAAc;AAGlD,cAAI,CAAC,+BAA+B,CAAC,MAAM,QAAQ,4BAA4B,QAAQ,KAAK,4BAA4B,SAAS,WAAW,GAAG;AAC7I,iBAAK,IAAI,KAAK,8BAA8B,OAAO,EAAE;AACrD;AAAA,UACF;AAIA,qBAAW,OAAO,CAAC,UAAU,gBAAgB,mBAAmB,GAAG;AACjE,gBAAI,CAAC;AAAK;AAEV,uBAAW,cAAc,eAAe,IAAI,GAAG,GAAG;AAChD,oBAAM,aAAa,eAAe,IAAI,GAAG,EAAE,UAAU;AACrD,oBAAM,aAAwC,CAAC;AAG/C,yBAAW,WAAW,4BAA4B,UAAU;AAC1D,sBAAM,eAAe,IAAI,KAAK,QAAQ,WAAW,WAAW,EAAE,QAAQ;AACtE,oBAAI,QAAQ,WAAW,gBAAgB,cAAc,WAAW,eAC3D,WAAW,KAAK,CAAC,UAAW,MAAM,OAAO,YAAa;AAAG;AAI9D,oBAAI;AACJ,oBAAI,IAAI,IAAI,SAAS,cAAc,GAAG;AAEpC,wBAAM,cAAc,WAAW;AAAA,gBACjC,WAAW,IAAI,IAAI,SAAS,mBAAmB,GAAG;AAEhD,yBAAO,QAAQ,WAAW,QAAQ,MAAO,cAAc,WAAW,eAAe,OAAQ;AAAA,gBAC3F,OAAO;AACL,wBAAM,QAAQ,WAAW;AAAA,gBAC3B;AAEA,qBAAK,IAAI,MAAM,UAAU,GAAG,IAAI,QAAQ,WAAW,WAAW,QAAQ,IAAI,GAAG,OAAO,UAAU,EAAE;AAEhG,2BAAW,KAAK;AAAA,kBACd,IAAI;AAAA,kBACJ;AAAA,kBACA,KAAK;AAAA,kBACL,MAAM,oBAAoB,KAAK;AAAA,kBAC/B,GAAG;AAAA,gBACL,CAAC;AAAA,cACH;AAGA,kBAAI,WAAW,SAAS,GAAG;AACzB,sBAAM,KAAK,YAAY,YAAY,cAAc;AAAA,kBAC/C,IAAI,IAAI;AAAA,kBACR,OAAO;AAAA,gBACT,CAAC;AAAA,cACH;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAMA,QAAI,KAAK,UAAU;AACjB;AAAA,IACF;AAEA,UAAM,QAAQ,IAAI;AAAA,MAChB,KAAK,cAAc,oBAAoB,wBAAwB,SAAS,QAAQ,IAAI;AAAA,MACpF,KAAK,cAAc,0BAA0B,wBAAwB,SAAS,OAAO,CAAC,MAAM,EAAE,WAAW,gBAAgB,CAAC,EAAE,QAAQ,IAAI;AAAA,MACxI,KAAK,cAAc,wBAAwB,wBAAwB,SAAS,OAAO,CAAC,MAAM,EAAE,WAAW,gBAAgB,CAAC,EAAE,QAAQ,IAAI;AAAA,MACtI,KAAK,cAAc,4BAA4B,wBAAwB,SAAS,OAAO,CAAC,MAAM,EAAE,WAAW,gBAAgB,CAAC,EAAE,QAAQ,IAAI;AAAA,IAC5I,CAAC;AAED,UAAM,UAAU,wBAAwB,SAAS,OAAO,CAAC,MAAM,EAAE,WAAW,UAAU,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,WAAW,KAAe;AACnI,QAAI,QAAQ,SAAS,GAAG;AACtB,YAAM,SAAS,KAAK,IAAI,GAAG,OAAO;AAClC,YAAM,SAAS,KAAK,IAAI,GAAG,OAAO;AAClC,YAAM,SAAS,KAAK,MAAM,QAAQ,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,QAAQ,SAAS,GAAI,IAAI;AAExF,YAAM,OAAO,wBAAwB,SAAS,KAAK,CAAC,MAAM,EAAE,WAAW,UAAU,MAAM;AACvF,YAAM,OAAO,wBAAwB,SAAS,KAAK,CAAC,MAAM,EAAE,WAAW,UAAU,MAAM;AACvF,YAAM,UAAU,OAAO,GAAG,KAAK,WAAW,IAAI,MAAM,KAAK,WAAW,GAAG,IAAI,KAAK,WAAW,IAAI,KAAK;AACpG,YAAM,UAAU,OAAO,GAAG,KAAK,WAAW,IAAI,MAAM,KAAK,WAAW,GAAG,IAAI,KAAK,WAAW,IAAI,KAAK;AAEpG,YAAM,QAAQ,IAAI;AAAA,QAChB,KAAK,cAAc,uBAAuB,QAAQ,IAAI;AAAA,QACtD,KAAK,cAAc,+BAA+B,SAAS,IAAI;AAAA,QAC/D,KAAK,cAAc,uBAAuB,QAAQ,IAAI;AAAA,QACtD,KAAK,cAAc,+BAA+B,SAAS,IAAI;AAAA,QAC/D,KAAK,cAAc,uBAAuB,QAAQ,IAAI;AAAA,MACxD,CAAC;AAAA,IACH,OAAO;AACL,YAAM,QAAQ,IAAI;AAAA,QAChB,KAAK,cAAc,uBAAuB,EAAE,KAAK,MAAM,GAAG,EAAK,GAAG,IAAI;AAAA,QACtE,KAAK,cAAc,+BAA+B,EAAE,KAAK,MAAM,GAAG,EAAK,GAAG,IAAI;AAAA,QAC9E,KAAK,cAAc,uBAAuB,EAAE,KAAK,MAAM,GAAG,EAAK,GAAG,IAAI;AAAA,QACtE,KAAK,cAAc,+BAA+B,EAAE,KAAK,MAAM,GAAG,EAAK,GAAG,IAAI;AAAA,QAC9E,KAAK,cAAc,uBAAuB,EAAE,KAAK,MAAM,GAAG,EAAK,GAAG,IAAI;AAAA,MACxE,CAAC;AAAA,IACH;AAAA,EACF;AAEF;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAE3B,SAAO,UAAU,CAAC,YAAiD,IAAI,WAAW,OAAO;AAC3F,OAAO;AAEL,GAAC,MAAM,IAAI,WAAW,GAAG;AAC3B;",
  "names": ["axios"]
}
